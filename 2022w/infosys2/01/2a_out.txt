SQL> 
SQL> CREATE OR REPLACE PROCEDURE adjust_salary(emp_id employees.employee_id%TYPE)
  2  AS
  3      current_job employees.job_id%TYPE;
  4      current_salary employees.salary%TYPE;
  5      min_salary jobs.min_salary%TYPE;
  6      max_salary jobs.max_salary%TYPE;
  7  BEGIN
  8      SELECT job_id, salary INTO current_job, current_salary FROM employees
  9      WHERE employee_id = emp_id;
 10  
 11      SELECT min_salary, max_salary INTO min_salary, max_salary FROM jobs
 12      WHERE job_id = current_job;
 13  
 14      dbms_output.put('current salary is ');
 15      dbms_output.put_line(current_salary);
 16  
 17      IF current_salary < min_salary THEN
 18          dbms_output.put_line('adjusted upwards');
 19          UPDATE employees SET salary = min_salary WHERE employee_id = emp_id;
 20      ELSIF current_salary > max_salary THEN
 21          dbms_output.put_line('adjusted downwards');
 22          UPDATE employees SET salary = max_salary WHERE employee_id = emp_id;
 23      END IF;
 24  EXCEPTION
 25      WHEN NO_DATA_FOUND THEN
 26          DBMS_OUTPUT.PUT_LINE('Given employee does not exist.');
 27  END adjust_salary;
 28  /

Procedure ADJUST_SALARY compiled

SQL> 
SQL> -- create employees with 1. correct, 2. low and 3. high salary for their job
SQL> -- IT_PROG is [4000, 10000]
SQL> EXEC add_employee('Max', 'Mustermann', 'max@muster.at', '06999339838', 'IT_PROG', 8000, 230);

PL/SQL procedure successfully completed.

SQL> EXEC add_employee('Simone', 'Musterfrau', 'simone@muster.at', '06999339839', 'IT_PROG', 3000, 240);

PL/SQL procedure successfully completed.

SQL> EXEC add_employee('Julia', 'Musterfrau', 'julia@muster.at', '06999339839', 'IT_PROG', 11000, 240);

PL/SQL procedure successfully completed.

SQL> 
SQL> BEGIN
  2      -- adjust salaries of newly created employees
  3      FOR emp IN (SELECT * FROM employees WHERE email LIKE '%@muster.at') LOOP
  4          adjust_salary(emp.employee_id);
  5      END LOOP;
  6  END;
  7  /

PL/SQL procedure successfully completed.

SQL> 
SQL> --- attempt to adjust salary for nonexistent employee
SQL> EXEC adjust_salary(1);

PL/SQL procedure successfully completed.

SQL> 
SQL> --- verify
SQL> SELECT first_name, last_name, salary FROM employees WHERE email LIKE '%@muster.at';

FIRST_NAME           LAST_NAME                     SALARY
-------------------- ------------------------- ----------
Simone               Musterfrau                      4000
Julia                Musterfrau                     10000
Max                  Mustermann                      8000

SQL> 
SQL> -- cleanup
SQL> DELETE FROM employees WHERE email LIKE '%@muster.at';

3 rows deleted.

